---
import '../assets/normalize.css'
import '../assets/style.css'
import '../assets/global.css'
import { SEO } from 'astro-seo'
import { getEnv } from '../lib/env'
import backToTopIcon from '../assets/back-to-top.svg'

const { SITE_URL, RSS_URL, RSS_PREFIX } = Astro.locals
const { channel } = Astro.props

const locale = getEnv(import.meta.env, Astro, 'LOCALE')

const seo = channel?.seo
const reqPathname = Astro.url.pathname.replace(/\/$/, '')
const canonical = SITE_URL.startsWith('http') ? new URL(SITE_URL).origin + reqPathname : Astro.url.origin + reqPathname

const { origin, pathname } = new URL(canonical)
const twitter = getEnv(import.meta.env, Astro, 'TWITTER')

const seoParams = {
  title: seo?.title,
  description: seo?.text ?? channel?.description,
  canonical,
  noindex: seo?.noindex ?? getEnv(import.meta.env, Astro, 'NOINDEX'),
  nofollow: seo?.nofollow ?? getEnv(import.meta.env, Astro, 'NOFOLLOW'),
  openGraph: {
    basic: {
      type: 'website',
      title: channel?.title ?? '',
      url: canonical,
      image: channel?.avatar ? channel.avatar : origin + '/favicon.ico',
    },
    optional: {
      description: seo?.text ?? channel?.description,
      locale,
    },
  },
  extend: {
    link: [
      {
        rel: 'icon',
        href: channel?.avatar
          ? `https://wsrv.nl/?w=64&h=64&fit=cover&mask=circle&url=ssl:${channel?.avatar?.replace(/^https?:\/\//, '')}`
          : '/favicon.svg',
      },
    ],
  },
}

const GOOGLE_SEARCH_SITE = getEnv(import.meta.env, Astro, 'GOOGLE_SEARCH_SITE')
const searchAction = GOOGLE_SEARCH_SITE ? 'https://www.google.com/search' : '/search/result'

const HEADER_INJECT = getEnv(import.meta.env, Astro, 'HEADER_INJECT')
const FOOTER_INJECT = getEnv(import.meta.env, Astro, 'FOOTER_INJECT')
const TAGS = getEnv(import.meta.env, Astro, 'TAGS')
const LINKS = getEnv(import.meta.env, Astro, 'LINKS')
const navs = (getEnv(import.meta.env, Astro, 'NAVS') || '')
  .split(';')
  .filter(Boolean)
  .map((link) => {
    link = link.split(',')
    return {
      title: link[0],
      href: link[1],
    }
  })
---

<!doctype html>
<html lang={locale ?? 'en'}>
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#ffffff" />
    <meta name="theme-color" media="(prefers-color-scheme: dark)" content="#1a1a1a" />
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent" />
    <link rel="alternate" type="application/rss+xml" title={`${RSS_PREFIX}${channel?.title}`} href={RSS_URL} />
    <style is:inline>
      @view-transition {
        navigation: auto; /* enabled */
      }
    </style>
    <script is:inline>
      // 立即设置初始主题，避免闪烁
      (function() {
        const hour = new Date().getHours();
        const isNight = hour < 6 || hour >= 18;
        const initialTheme = isNight ? 'night' : 'day';
        
        // 立即设置主题属性
        if (document.documentElement) {
          document.documentElement.setAttribute('data-theme', initialTheme);
        }
        
        // 等DOM body可用时再次设置
        if (document.body) {
          document.body.setAttribute('data-theme', initialTheme);
        } else {
          document.addEventListener('DOMContentLoaded', function() {
            document.body.setAttribute('data-theme', initialTheme);
          });
        }
        
        // 立即更新浏览器主题色
        let themeColorMeta = document.querySelector('meta[name="theme-color"]');
        if (themeColorMeta) {
          themeColorMeta.content = isNight ? '#1a1a1a' : '#ffffff';
        }
      })();
    </script>
    <SEO
      titleTemplate={`%s | ${channel?.title}`}
      titleDefault={[channel?.title, seoParams.description].filter(Boolean).join(' - ')}
      twitter={{
        card: 'summary_large_image',
        creator: twitter ? `@${twitter}` : undefined,
      }}
      {...seoParams}
    />
    <Fragment set:html={HEADER_INJECT} />
  </head>

  <body>
    <div id="wrapper">
      <div id="container">
        <div id="main-container">
          <slot />
        </div>
        <div id="aside-container">
          <slot name="aside">
            <div class="nav">
              <div class="nav-item">
                <a href={SITE_URL} title={channel?.title} class={`nav-link ${pathname === '/' ? 'current' : ''}`}>
                  Home
                </a>
              </div>
              {
                TAGS ? (
                  <div class="nav-item">
                    <a
                      href={`${SITE_URL}tags`}
                      title="分省标签"
                      class={`nav-link ${pathname === '/tags' ? 'current' : ''}`}
                    >
                      分省标签
                    </a>
                  </div>
                ) : null
              }
              {
                LINKS ? (
                  <div class="nav-item">
                    <a
                      href={`${SITE_URL}links`}
                      title="外部链接"
                      class={`nav-link ${pathname === '/links' ? 'current' : ''}`}
                    >
                      外部链接
                    </a>
                  </div>
                ) : null
              }
              {
                navs.map((nav) => (
                  <div class="nav-item">
                    <a href={nav.href} title={nav.title} target="_blank" rel="noopener" class="nav-link">
                      {nav.title}
                    </a>
                  </div>
                ))
              }
              <div class="nav-item">
                <button id="theme-toggle" class="theme-toggle-btn" title="切换主题">
                  <span class="theme-icon day-icon">☀️</span>
                  <span class="theme-icon night-icon">🌙</span>
                  <span class="toggle-text">主题</span>
                </button>
              </div>
            </div>
            <input class="search-icon" name="icon" type="checkbox" placeholder="🔍" />
            <form class="search-form" action={searchAction} method="get">
              {GOOGLE_SEARCH_SITE ? <input type="hidden" name="as_sitesearch" value={GOOGLE_SEARCH_SITE} /> : null}
              <input type="text" name="q" placeholder="🔍" />
            </form>
            {channel?.stats && (channel.stats.subscribers > 0 || channel.stats.photos > 0 || channel.stats.links > 0) && (
              <div class="channel-stats">
                {channel.stats.subscribers > 0 && (
                  <div class="stat-item">
                    <span class="stat-emoji bright-emoji stats-emoji">🔥</span>
                    <span class="stat-text">{channel.stats.subscribers} 订阅者</span>
                  </div>
                )}
                {channel.stats.photos > 0 && (
                  <div class="stat-item">
                    <span class="stat-emoji bright-emoji stats-emoji">🌈</span>
                    <span class="stat-text">{channel.stats.photos} 图片</span>
                  </div>
                )}
                {channel.stats.links > 0 && (
                  <div class="stat-item">
                    <span class="stat-emoji bright-emoji stats-emoji">⚡</span>
                    <span class="stat-text">{channel.stats.links} 链接</span>
                  </div>
                )}
              </div>
            )}
            <div class="copyright-wrap">
              Powered by
              <a
                href="https://ll.sd"
                title="drfy"
                target="_blank"
                rel="noopener"
              >
                Drfy
              </a> &
              <a href="https://i8qiu.com" title="秋天卡圈" target="_blank" rel="noopener">
                秋天卡圈
              </a>
            </div>
          </slot>
        </div>
      </div>
    </div>
    <a href="#wrapper" id="back-to-top" aria-label="Back to top">
      <img {...backToTopIcon} alt="Back to Top" />
    </a>
    <script is:inline>
      // 完整的主题切换器
      class ThemeSwitcher {
        constructor() {
          this.init();
        }

        init() {
          this.applyTimeBasedTheme();
          
          setInterval(() => {
            this.applyTimeBasedTheme();
          }, 60000);
          
          document.addEventListener('visibilitychange', () => {
            if (!document.hidden) {
              this.applyTimeBasedTheme();
            }
          });
        }

        isNightTime() {
          const hour = new Date().getHours();
          return hour < 6 || hour >= 18;
        }

        applyTimeBasedTheme() {
          const isNight = this.isNightTime();
          const currentTheme = document.body.getAttribute('data-theme');
          const newTheme = isNight ? 'night' : 'day';
          
          if (currentTheme !== newTheme) {
            document.body.setAttribute('data-theme', newTheme);
            document.documentElement.setAttribute('data-theme', newTheme);
            this.updateThemeColor(isNight);
            
            document.dispatchEvent(new CustomEvent('themechange', {
              detail: { theme: newTheme, isNight }
            }));
          }
        }

        updateThemeColor(isNight) {
          let themeColorMeta = document.querySelector('meta[name="theme-color"]');
          if (themeColorMeta) {
            const themeColor = isNight ? '#1a1a1a' : '#ffffff';
            themeColorMeta.content = themeColor;
            
            // 更新苹果设备状态栏样式
            let appleStatusMeta = document.querySelector('meta[name="apple-mobile-web-app-status-bar-style"]');
            if (appleStatusMeta) {
              appleStatusMeta.content = isNight ? 'black-translucent' : 'default';
            }
          }
        }

        setTheme(theme) {
          if (['day', 'night'].includes(theme)) {
            document.body.setAttribute('data-theme', theme);
            document.documentElement.setAttribute('data-theme', theme);
            this.updateThemeColor(theme === 'night');
            
            // 保存用户手动选择的主题偏好
            localStorage.setItem('user-theme-preference', theme);
            localStorage.setItem('theme-override-time', Date.now().toString());
          }
        }

        getCurrentTheme() {
          return document.body.getAttribute('data-theme') || 'day';
        }

        toggleTheme() {
          const currentTheme = this.getCurrentTheme();
          const newTheme = currentTheme === 'day' ? 'night' : 'day';
          this.setTheme(newTheme);
          
          // 触发自定义事件
          document.dispatchEvent(new CustomEvent('themechange', {
            detail: { theme: newTheme, isNight: newTheme === 'night', manual: true }
          }));
        }

        // 检查是否应该应用用户偏好而不是时间
        shouldUseUserPreference() {
          const preference = localStorage.getItem('user-theme-preference');
          const overrideTime = localStorage.getItem('theme-override-time');
          
          if (!preference || !overrideTime) return false;
          
          // 用户偏好有效期：2小时
          const twoHours = 2 * 60 * 60 * 1000;
          return (Date.now() - parseInt(overrideTime)) < twoHours;
        }

        // 修改应用主题的逻辑，考虑用户偏好
        applyTimeBasedTheme() {
          // 如果用户最近手动选择了主题，使用用户偏好
          if (this.shouldUseUserPreference()) {
            const userTheme = localStorage.getItem('user-theme-preference');
            const currentTheme = document.body.getAttribute('data-theme');
            
            if (currentTheme !== userTheme) {
              document.body.setAttribute('data-theme', userTheme);
              document.documentElement.setAttribute('data-theme', userTheme);
              this.updateThemeColor(userTheme === 'night');
            }
            return;
          }
          
          // 否则使用基于时间的自动切换
          const isNight = this.isNightTime();
          const currentTheme = document.body.getAttribute('data-theme');
          const newTheme = isNight ? 'night' : 'day';
          
          if (currentTheme !== newTheme) {
            document.body.setAttribute('data-theme', newTheme);
            document.documentElement.setAttribute('data-theme', newTheme);
            this.updateThemeColor(isNight);
            
            document.dispatchEvent(new CustomEvent('themechange', {
              detail: { theme: newTheme, isNight, manual: false }
            }));
          }
        }
      }

      // 初始化主题切换器和按钮事件
      function initTheme() {
        window.themeSwitcher = new ThemeSwitcher();
        
        // 绑定按钮点击事件
        const toggleButton = document.getElementById('theme-toggle');
        if (toggleButton) {
          toggleButton.addEventListener('click', () => {
            window.themeSwitcher.toggleTheme();
          });
        }
      }

      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initTheme);
      } else {
        initTheme();
      }
    </script>
    <Fragment set:html={FOOTER_INJECT} />
  </body>
</html>
